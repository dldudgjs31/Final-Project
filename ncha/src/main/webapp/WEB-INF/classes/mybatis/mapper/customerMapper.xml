<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="customer">

<update id="insertOrder" parameterType="com.sp.app.customer.Customer">
	INSERT ALL
		INTO store_order_list (orderNum, memberIdx,total_sales, order_date)
		VALUES(order_seq.NEXTVAL,#{memberIdx},#{total_sales},SYSDATE)
		INTO product_order_detail (orderNum, sellerId,productName,categoryName, number_sales, price , order_option, deliveryDetail, productNum)
		VALUES(order_seq.NEXTVAL,#{sellerId},#{productName},#{categoryName},#{number_sales},#{price},#{order_option},#{deliveryDetail}, #{productNum})
	SELECT * FROM dual
</update>

<insert id="insertCart" parameterType="com.sp.app.customer.Customer">
	INSERT INTO store_cart(productNum, quantity, userId, cartNum, order_option, optionNum)
	VALUES(#{productNum},#{quantity},#{userId} ,cart_seq.NEXTVAL, #{order_option},#{optionNum})
</insert>

<select id="listProduct" parameterType="Integer" resultType="String">
		SELECT imageFilename
		FROM product_bbs b
		JOIN seller m ON b.sellerId=m.sellerId
		LEFT OUTER JOIN (
			SELECT * FROM (
				SELECT productNum, rank() over(partition by productNum order by main_imageFileNum) rank, imageFilename FROM product_image
			) WHERE rank = 1
		) i ON b.productNum = i.productNum
		WHERE b.productNum = #{productNum}
</select>

<update id="updateStock" parameterType="Integer">
	UPDATE product_bbs SET stock=#{stock} WHERE productNum=#{productNum}
</update>

<update id="updateStockOption" parameterType="com.sp.app.customer.Customer">
	UPDATE product_option SET option_stock=#{option_stock} WHERE optionNum =#{optionNum} 
</update>

<select id="readStockOption" parameterType="Integer" resultType="Integer">
	SELECT option_stock FROM product_option WHERE optionNum = #{optionNum}
</select>

<select id="readCart" parameterType="map" resultType="com.sp.app.customer.Customer">
		SELECT b.productNum, b.sellerId, productName, price, b.discount_rate, quantity,((price-discount_rate)*quantity) total_sales, imageFilename, cartNum, g.categoryName, optionNum, order_option, b.stock
		FROM store_cart c
		LEFT OUTER JOIN product_bbs b ON c.productNum=b.productNum
		LEFT OUTER JOIN product_category g ON g.categoryNum = b.categoryNum 
		LEFT OUTER JOIN (
			SELECT * FROM (
				SELECT productNum, rank() over(partition by productNum order by main_imageFileNum) rank, imageFilename FROM product_image
			) WHERE rank = 1
		) i ON c.productNum= i.productNum
		WHERE c.userId=#{userId}
		ORDER BY c.cartnum ASC
</select>

<delete id="deleteCart" parameterType="Integer">
	DELETE FROM store_cart WHERE cartNum = #{cartNum}
</delete>

<delete id="deleteAllCart" parameterType="String">
	DELETE FROM store_cart WHERE userId =#{userId}
</delete>

<select id="readStock" parameterType="Integer" resultType="Integer">
	SELECT stock FROM product_bbs WHERE productNum = #{productNum}
</select>
<select id="readCartQuantity" parameterType="com.sp.app.customer.Customer" resultType="Integer">
	SELECT NVL(sum(quantity), 0) sum 
	FROM store_cart 
	WHERE productNum = #{productNum} AND userId = #{userId}
</select>

<select id="readOrderList" parameterType="map" resultType="com.sp.app.customer.Customer">
 	SELECT d.productName, i.imageFilename, s.order_date, d.sellerId, d.productNum, d.order_option, d.number_sales, d.price, s.orderNum, s.memberIdx
	FROM store_order_list s
	LEFT OUTER JOIN product_order_detail d ON s.orderNum = d.orderNum
	LEFT OUTER JOIN product_image i ON i.productNum = d.productNum
	WHERE s.memberIdx = #{memberIdx}
	ORDER BY s.order_date DESC
	OFFSET #{offset} ROWS FETCH FIRST #{rows} ROWS ONLY
</select>

<select id="readReviewCount" parameterType="com.sp.app.customer.Customer" resultType="Integer">
	SELECT count(*) reviewCount
	FROM product_review r
	LEFT OUTER JOIN
	(
	    SELECT d.productNum, memberIdx, d.productName, o.orderNum
	    FROM STORE_ORDER_LIST o
	    JOIN PRODUCT_ORDER_DETAIL d ON o.orderNum = d.orderNum
	    WHERE o.memberIdx = #{memberIdx}
	) a ON r.orderNum = a.orderNum
	WHERE r.ORDERNUM = #{orderNum}
</select>

<select id="readReviewNum" parameterType="Integer" resultType="Integer">
	SELECT reviewNum FROM product_review WHERE orderNum = #{orderNum}
</select>

<select id="dataOrderCount" parameterType="Long" resultType="Integer">
	SELECT count(*) dataCount FROM store_order_list WHERE memberIdx= #{memberIdx} 
</select>

<select id="dataCartCount" parameterType="String" resultType="Integer">
	SELECT COUNT(*) dataCount FROM product_cart WHERE userId = #{userId}
</select>
</mapper>