<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="store">
	<!-- 상품 넘버 sequence-->
	<select id="seq" resultType="Integer">
		SELECT product_seq.NEXTVAL FROM dual
	</select>

	<insert id="insertProduct" parameterType="com.sp.app.store.Store">
		INSERT INTO product_bbs(productNum, productName, created_date,hitCount,price, detail,  stock, discount_rate,sellerId,categoryNum)
		VALUES(#{productNum}, #{productName}, SYSDATE,0,#{price},#{detail}, #{stock},#{discount_rate}, #{sellerId},#{categoryNum})
	</insert>
	
	<insert id="insertOption" parameterType="map">
		INSERT INTO product_option(optionNum, optionDetail, option_stock, productNum)
		VALUES(option_seq.NEXTVAL,#{optionDetail},#{option_stock},#{productNum})
	</insert>
	<insert id="insertMyOption" parameterType="com.sp.app.store_profile.Option">
		INSERT INTO product_option(optionNum, optionDetail, option_stock, productNum)
		VALUES(option_seq.NEXTVAL,#{optionDetail},#{option_stock},#{productNum})
	</insert>
	
	 <select id="dataCount" parameterType="map" resultType="Integer">
	 	SELECT NVL(COUNT(*),0) 
	 	FROM product_bbs b
	 	JOIN seller m ON b.sellerId = m.sellerId
	 	<where>
	 		<if test="keyword!=null and keyword!=''">
	 			<include refid="where-list"/>
	 		</if>
	 		<if test="categoryNum!=null and categoryNum!=''">
 				AND b.categoryNum = #{categoryNum}
 			</if>
	 	</where>	
	 </select>
	 
	 <select id="dataCountMyproduct" parameterType="map" resultType="Integer">
	 	SELECT NVL(COUNT(*),0) 
	 	FROM product_bbs b
	 	JOIN seller m ON b.sellerId = m.sellerId
	 	WHERE b.sellerId = #{sellerId}
	 		<if test="categoryNum!=null and categoryNum!=''">
 				 AND b.categoryNum = #{categoryNum}
 			</if>
	 </select>
	 
	 	 <sql id="where-list">
	 	<choose>
	 		<when test="condition=='all' ">
	 			( INSTR(productName, #{keyword}) &gt; 0 
	 				OR DBMS_LOB.INSTR(detail, #{keyword}) &gt; 0 )
	 		</when>
	 		
	 		<when test="condition=='created_date' ">
	 			( TO_CHAR(created_date, 'YYYYMMDD') = #{keyword} 
	 				OR TO_CHAR(created_date, 'YYYY-MM-DD') = #{keyword} )
	 		</when>
	 		
	 		<when test="condition=='detail' ">
	 			DBMS_LOB.INSTR(detail, #{keyword}) &gt; 0
	 		</when>
	 		

			<otherwise>
	 			INSTR(${condition}, #{keyword}) &gt; 0
	 		</otherwise> 
	 	</choose>
	 </sql>
	 
	 <select id="listProduct" parameterType="map" resultType="com.sp.app.store.Store">
		SELECT b.productNum,productName,b.created_date,hitCount,price, detail, stock, discount_rate,b.sellerId,categoryNum, imageFilename, m.profile_imageFilename,m.sellername
		FROM product_bbs b
		JOIN seller m ON b.sellerId=m.sellerId
		LEFT OUTER JOIN (
			SELECT * FROM (
				SELECT productNum, rank() over(partition by productNum order by main_imageFileNum) rank, imageFilename FROM product_image
			) WHERE rank = 1
		) i ON b.productNum = i.productNum
		<where>
	 		<if test="keyword!=null and keyword!=''">
	 			<include refid="where-list"/>
	 		</if>
	 		<if test="categoryNum!=null and categoryNum!=''">
 				AND b.categoryNum = #{categoryNum}
 			</if>
	 	</where>
		ORDER BY productNum DESC
		OFFSET #{offset} ROWS FETCH FIRST #{rows} ROWS ONLY
	 </select>
	 
	 <select id="listMyProduct" parameterType="map" resultType="com.sp.app.store.Store">
		SELECT b.productNum,productName,b.created_date,hitCount,price, detail, stock, discount_rate,b.sellerId,b.categoryNum, imageFilename, profile_imagefilename, c.categoryName,m.sellername
		FROM product_bbs b
		LEFT OUTER JOIN seller m ON b.sellerId=m.sellerId
		LEFT OUTER JOIN product_category c ON c.categoryNum = b.categoryNum
		LEFT OUTER JOIN (
			SELECT * FROM (
				SELECT productNum, rank() over(partition by productNum order by main_imageFileNum) rank, imageFilename FROM product_image
			) WHERE rank = 1
		) i ON b.productNum = i.productNum
		WHERE b.sellerId = #{sellerId}
	 		<if test="categoryNum!=null and categoryNum!=''">
 				AND b.categoryNum = #{categoryNum}
 			</if>
		ORDER BY productNum DESC
		OFFSET #{offset} ROWS FETCH FIRST #{rows} ROWS ONLY
	 </select>
	 
	 <select id="readProduct" parameterType="Integer" resultType="com.sp.app.store.Store">
	 	SELECT productNum,productName,b.created_date,hitCount,price, detail, stock, discount_rate,b.sellerId,c.categoryNum,c.categoryName,m.profile_imagefilename,m.sellername
		FROM product_bbs b
		JOIN product_category  c ON c.categoryNum = b.categoryNum
		JOIN seller m ON b.sellerId=m.sellerId
		WHERE productNum = #{num}
	 </select>
	 
	 <update id="updateHitCount" parameterType="Integer">
	 	UPDATE product_bbs SET hitCount=hitCount+1 
	 	WHERE productNum=#{num}
	 </update>
	 
	 <select id="preReadProduct" parameterType="map" resultType="com.sp.app.store.Store">
	 	SELECT productNum, productName
	 	FROM product_bbs b
	 	JOIN seller s ON  b.sellerId = s.sellerId
	 	<where>
	 		<if test="keyword!=null and keyword!=''">
	 			<include refid="where-list"/>
	 		</if>
	 		<if test="categoryNum!=null and categoryNum!=''">
 				AND b.categoryNum = #{categoryNum}
 			</if>
	 		AND (productNum &gt; #{num})
	 	</where>
	 	ORDER BY productNum ASC
	 	FETCH FIRST 1 ROWS ONLY
	 </select>
	 
	 <select id="nextReadProduct" parameterType="map" resultType="com.sp.app.store.Store">
	 	SELECT productNum, productName
	 	FROM product_bbs b
	 	JOIN seller s ON  b.sellerId = s.sellerId
	 	<where>
	 		<if test="keyword!=null and keyword!=''">
	 			<include refid="where-list"/>
	 		</if>
	 		<if test="categoryNum!=null and categoryNum!=''">
 				AND b.categoryNum = #{categoryNum}
 			</if>
	 		AND (productNum &lt; #{num})
	 	</where>
	 	ORDER BY productNum DESC
	 	FETCH FIRST 1 ROWS ONLY
	 </select>

	<update id="updateProduct" parameterType="com.sp.app.store.Store">
		UPDATE product_bbs SET productName=#{productName}, detail=#{detail}, price=#{price}, stock=#{stock}, categoryNum=#{categoryNum}, discount_rate=#{discount_rate}
			WHERE productNum=#{productNum}
	</update>	
	 

	 <delete id="deleteProduct" parameterType="Integer">
		DELETE FROM product_bbs WHERE productNum= #{num}
	</delete>
	
	 <!-- 이미지 처리 -->
	 <select id="image_seq" resultType="Integer">
		SELECT productimage_seq.NEXTVAL FROM dual
	</select>
	 
	 <insert id="insertFile" parameterType="com.sp.app.store.Store">
	 	INSERT INTO product_image(main_imageFileNum, imageFilename, productNum)
	 	VALUES(#{main_imageFileNum},#{imageFilename},#{productNum})
	 </insert>
	 
	 <select id="listArticleFile" parameterType="map" resultType="com.sp.app.store.Store">
		SELECT main_imageFileNum, imageFilename, productNum
			FROM product_image	
			ORDER BY main_imageFileNum ASC
	</select>
	
	<select id="listFile" parameterType="Integer" resultType="com.sp.app.store.Store">
		SELECT main_imageFileNum, imageFilename, productNum
		FROM product_image	
		WHERE productNum=#{productNum}
		ORDER BY main_imageFileNum ASC
	</select>
	
	<select id="listOption" parameterType="Integer" resultType="com.sp.app.store.Store">
		SELECT optionDetail opt_detail, option_stock opt_stock , optionNum
		FROM product_option
		WHERE productNum = #{productNum}
	</select>
	
	<delete id="deleteImage" parameterType="Integer">
		DELETE FROM product_image WHERE main_imageFileNum = #{main_imageFileNum}
	</delete>
	
	<delete id="deleteOption" parameterType="Integer">
		DELETE FROM product_option WHERE optionNum = #{optionNum}
	</delete>
	
	<delete id="deleteAllOption" parameterType="Integer">
		DELETE FROM product_option WHERE productNum=#{productNum}
	</delete>
	
	<delete id="deleteAllImage" parameterType="Integer">
		DELETE FROM product_image WHERE productNum=#{productNum}
	</delete>
	<select id="readCategoryName" parameterType="Integer" resultType="String">
	 	SELECT categoryName FROM product_category WHERE categoryNum = #{categoryNum}
	</select>
	
	
	<!-- 커뮤니티 메인에 띄울 상품 -->
	<select id="readProductMain" resultType="com.sp.app.store.Store">
		SELECT b.productNum,productName,hitCount,price, imageFilename
		FROM product_bbs b
		LEFT OUTER JOIN (
			SELECT * FROM (
				SELECT productNum, rank() over(partition by productNum order by main_imageFileNum) rank, imageFilename FROM product_image
			) WHERE rank = 1
		) i ON b.productNum = i.productNum
		ORDER BY hitCount DESC
		FETCH FIRST 1 ROW ONLY
	</select>
	
	<update id="updateMyStock" parameterType="map">
		UPDATE product_bbs SET stock = #{stock} WHERE productNum = #{productNum}
	</update>
	
	<!-- 판매자 메인단 -->
	<select id="dataMySoldCount" parameterType="map" resultType="Integer">
	 	SELECT NVL(SUM(d.number_sales),0) 
		FROM product_order_detail d
		LEFT OUTER JOIN store_order_list o ON o.orderNum = d.orderNum
		WHERE sellerId=#{sellerId}
	</select>
	<select id="dataMyProductCount" parameterType="map" resultType="Integer">
	 	SELECT count(*) FROM product_bbs WHERE sellerId = #{sellerId} 
	 	<if test="stock!=null">
	 	AND stock=#{stock}
	 	</if>
	</select>
	
	<select id="readBestReviewProduct" parameterType="map" resultType="Integer">
	
	</select>
	
	<select id="readWorstReviewProduct" parameterType="map" resultType="Integer">
	
	</select>
	<select id="listRecentSoldProduct" parameterType="map" resultType="com.sp.app.customer.Customer">
		SELECT d.productName, o.total_sales, d.order_option, d.number_sales, o.order_date, i.imageFilename,d.productNum
		FROM store_order_list o 
		LEFT OUTER JOIN product_order_detail d ON o.orderNum = d.orderNum
		LEFT OUTER JOIN(
					SELECT * FROM (
						SELECT productNum, rank() over(partition by productNum order by main_imageFileNum) rank, imageFilename FROM product_image
					) WHERE rank = 1
				) i ON i.productNum = d.productNum
		WHERE d.sellerId= #{sellerId}
		ORDER BY o.order_date DESC
		OFFSET 0 ROWS FETCH FIRST 3 ROWS ONLY
	</select>
	
	<insert id="insertLike" parameterType="map">
	 INSERT INTO product_like(productNum, userId) VALUES(#{productNum}, #{userId})
	</insert>
	
	<select id="checkLike" parameterType="map" resultType="Integer">
		SELECT NVL(count(*),0) FROM product_like WHERE productNum =#{productNum} AND userId=#{userId}
	</select>
	<delete id="deleteLike" parameterType="map">
		DELETE FROM product_like WHERE productNum =#{productNum} AND userId=#{userId}
	</delete>
	<select id="dataLikeCount" parameterType="map" resultType="Integer">
	 	SELECT COUNT(*) FROM product_like WHERE userId=#{userId}
	</select>
	<select id="dataProductLikeCount" parameterType="Integer" resultType="Integer">
		SELECT COUNT(*) FROM product_like WHERE productNum=#{productNum}
	</select>
	
	<select id="dataStoreLikeCount" parameterType="map" resultType="Integer">
		select count(*) from product_like p 
		LEFT OUTER JOIN product_bbs b ON p.productNum = b.productNum
		WHERE sellerId = #{sellerId}
	</select>
	
	<insert id="insertStoreLike" parameterType="map">
		INSERT INTO store_follow(userId, sellerId) VALUES(#{userId},#{sellerId})
	</insert>
	
	<select id="checkStoreLike" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*),0) FROM store_follow WHERE userId =#{userId} AND sellerId = #{sellerId}
	</select>
	
	<delete id="deleteStoreLike" parameterType="map">
		DELETE FROM store_follow WHERE userId =#{userId} AND sellerId = #{sellerId}
	</delete>
	
	<select id="dataStoreFollowCount" parameterType="String" resultType="Integer">
		SELECT NVL(COUNT(*),0) FROM store_follow WHERE sellerId = #{sellerId}
	</select>
	
	<select id="dataMyStoreFollow" parameterType="String" resultType="Integer">
		SELECT NVL(COUNT(*),0) FROM store_follow WHERE userId =#{userId}
	</select>
	
	<select id="listFollow" parameterType="map" resultType="com.sp.app.customer.Customer">
		SELECT s.sellerName, s.profile_imageFilename, f.sellerId 
		FROM store_follow f 
		LEFT OUTER JOIN seller s ON s.sellerId = f.sellerId 
		WHERE f.userId =#{userId}
		OFFSET #{offset} ROWS FETCH FIRST #{rows} ROWS ONLY
	</select>
	
	<select id="listTop3Follower" resultType="com.sp.app.store.Store">
		SELECT count(*) storeFollowCount,f.sellerId, s.sellerName,s.introduce, s.profile_imageFilename
		from store_follow f  
		JOIN seller s ON f.sellerId = s.sellerId
		group by f.sellerId, s.sellerName,s.introduce, s.profile_imageFilename 
		order by  count(*) DESC
		OFFSET 0 ROWS FETCH FIRST 3 ROWS ONLY
	</select>
	
	<select id="listTop3SalesStore" resultType="com.sp.app.store.Store">
		select d.sellerId, m.sellerName,m.introduce, m.profile_imageFilename
		FROM store_order_list o 
		LEFt OUTER JOIN product_order_detail d ON o.orderNum = d.orderNum
		LEFT OUTER JOIN seller m ON m.sellerId = d.sellerId
		GROUP BY d.sellerId, m.sellerName,m.introduce, m.profile_imageFilename
		ORDER BY sum(total_sales) DESC
		OFFSET 0 ROWS FETCH FIRST 3 ROWS ONLY
	</select>
	
	<select id="readBestproduct" parameterType="Integer" resultType="com.sp.app.store.Store">
		select  b.productName, b.hitcount, b.price,b.discount_rate,b.stock, i.imageFilename,p.productNum
		FROM product_like p 
		LEFT OUTER JOIN product_bbs b ON p.productNum = b.productNum
		LEFT OUTER JOIN(
			SELECT * FROM (
		         SELECT productNum, rank() over(partition by productNum order by main_imageFileNum) rank, imageFilename FROM product_image
							) WHERE rank = 1
		) i ON i.productNum = b.productNum
		WHERE b.categoryNum =#{categoryNum}
		GROUP BY p.productnum,b.productName, b.hitcount, b.price,b.discount_rate,b.stock,i.imageFilename
		ORDER BY count(*) DESC
		OFFSET 0 ROWS FETCH FIRST 1 ROWS ONLY
	</select>
	
	<select id="totalSales" resultType="Integer">
		SELECT  NVL(SUM(total_sales),0)  
		FROM store_order_List 
		WHERE INSTR(TO_CHAR(order_date,'YYYY-MM-DD'),'2021',1) = 1 
	</select>
	
	<select id="totalSales2" resultType="Integer">
		SELECT  NVL(SUM(total_sales),0)  
		FROM store_order_List 
		WHERE INSTR(TO_CHAR(order_date,'YYYY-MM-DD'),'2020',1) = 1 
	</select>
</mapper>