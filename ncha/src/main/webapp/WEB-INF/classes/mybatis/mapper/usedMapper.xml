<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="used">
	
	<!-- 시퀀스 -->
	<select id="used_seq" resultType="Integer">
		SELECT used_seq.NEXTVAL FROM dual
	</select>

	<!-- 검색 조건 -->
	<!-- INSTR(문자열, 검색할 문자, 시작지점, n번째 검색단어) 함수는 찾는 문자의 위치를 반환 -->
	<sql id="where-list">
		<choose>
			<when test="condition=='all'">
				(INSTR(subject,#{keyword}) &gt; 0
					OR INSTR(content,#{keyword}) &gt; 0)
			</when>
			<when test="condition=='subject'">
				INSTR(subject,#{keyword}) &gt; 0
			</when>
			<when test="condition=='content'">
				INSTR(content,#{keyword}) &gt; 0
			</when>
		</choose>
	</sql>
	
	
	<!-- 게시글 CRUD -->
	<!-- 글삽입 -->
	<insert id="insertUsed" parameterType="com.sp.app.used.Used">
		INSERT INTO used_bbs(usedNum, userId, subject, content, hitCount, created_date, price, productCondition, dealingMode, location, sold_check, categoryNum)
				VALUES(#{usedNum}, #{userId}, #{subject}, #{content}, 0, SYSDATE,
				#{price}, #{productCondition}, #{dealingMode}, #{location}, 0, #{categoryNum})
	</insert>
	
	<!-- 글수정 -->
	<update id="updateUsed" parameterType="com.sp.app.used.Used">
		UPDATE used_bbs u SET subject=#{subject}, content=#{content}, categoryNum=#{categoryNum}, sold_check=#{sold_check}, 
		price=#{price}, productCondition=#{productCondition}, dealingMode=#{dealingMode}, location=#{location}
		WHERE usedNum = #{usedNum} 
	</update>
	
	<!-- 글 삭제 -->
	<delete id="deleteUsed" parameterType="Integer">
		DELETE FROM used_bbs WHERE usedNum = #{usedNum} 
	</delete>
	
	<!-- 글읽기 -->
	<select id="readUsed" parameterType="Integer" resultType="com.sp.app.used.Used">
		SELECT u.usedNum, u.userId, userName, price, productCondition, dealingMode, location,
			subject,content,TO_CHAR(created_date,'YYYY-MM-DD') created_date, sold_check, u.categoryNum, 
			c.categoryName, hitCount, NVL(fileCount,0) fileCount, NVL(usedLikeCount, 0) usedLikeCount, profile_imageFilename
		FROM used_bbs u
		JOIN member m ON u.userId = m.userId
		JOIN used_category c ON c.categoryNum = u.categoryNum
		LEFT OUTER JOIN(
			SELECT usedNum, COUNT(*) fileCount FROM used_image
			GROUP BY usedNum
		) f ON u.usedNum = f.usedNum
		LEFT OUTER JOIN(
			SELECT usedNum, COUNT(*) usedLikeCount FROM used_like
			GROUP BY usedNum
		) l ON u.usedNum = l.usedNum
		WHERE u.usedNum = #{usedNum}
	</select>
		
	<!-- 리스트, 리스트에서 가격 제목 카테고리 좋아요수 조회수 사진출력해야함 -->
	<!-- rank over : 중복 값들에 대해서 동일 순위로 표시하고, 중복 순위 다음 값에 대해서는 중복 개수만큼 떨어진 순위로 출력하도록 하는 함수
		partition by절  : 그룹을 짓고 그 안에서 순위를 구하고 싶을때-->
	<select id="listUsed" parameterType="map" resultType="com.sp.app.used.Used">
		SELECT u.usedNum, u.userId, userName, c.categoryName, subject, sold_check, hitCount, TO_CHAR(created_date,'YYYY-MM-DD')created_date,
			imageFilename, u.price, usedLikeCount
		FROM used_bbs u
		JOIN member m ON u.userId = m.userId
		JOIN used_category c ON c.categoryNum = u.categoryNum
		JOIN (
			SELECT * FROM(
				SELECT usedNum, rank() over(partition by usedNum order by used_imageFileNum) rank, imageFilename
				FROM used_image
			) WHERE rank = 1
		) i ON u.usedNum = i.usedNum
		LEFT OUTER JOIN (
			SELECT usedNum, COUNT(*) usedLikeCount FROM used_like
			GROUP BY usedNum
		) ul ON ul.usedNum = u.usedNum
		<where>
			<if test="keyword != null and keyword!=''">
				<include refid="where-list"></include>
			</if>
			<if test="categoryNum != null and categoryNum!=''">
				AND u.categoryNum = #{categoryNum}
			</if>
		</where>
		ORDER BY u.usedNum DESC
		OFFSET #{offset} ROWS FETCH FIRST #{rows} ROWS ONLY
	</select>
	
	
	
	<!-- 게시글 관련 -->
	<!-- 데이터개수  -->
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM used_bbs u
		JOIN member m ON u.userId=m.userId
		<where>
			<if test="keyword != null and keyword!=''">
				<include refid="where-list"></include>
			</if>
			<if test="categoryNum != null and categoryNum!=''">
				AND u.categoryNum = #{categoryNum}
			</if>
		</where>
	</select>
	
	<!-- 조회수 증가 -->
	<update id="updateHitCount" parameterType="Integer">
		UPDATE used_bbs SET hitCount=hitCount+1 WHERE usedNum = #{usedNum}
	</update>
	
	<!-- FETCH FIRST "N" ROWS ONLY 상위  N개결과 검색 -->
	<!-- 이전글 -->
	<select id="preReadDto" parameterType="map" resultType="com.sp.app.used.Used">
		SELECT usedNum, subject
		FROM used_bbs 
		WHERE usedNum &gt; #{usedNum}
		<if test="keyword != null and keyword!=''">
			AND <include refid="where-list"></include>
		</if>
		<if test="categoryNum != null and categoryNum!=''">
			AND u.categoryNum = #{categoryNum}
		</if>
		ORDER BY usedNum ASC
		FETCH FIRST 1 ROWS ONLY
    </select>

    <!-- 다음글 -->
    <select id="nextReadDto" parameterType="map" resultType="com.sp.app.used.Used">
		SELECT usedNum, subject
		FROM used_bbs 
		WHERE usedNum &lt; #{usedNum}
		<if test="keyword != null and keyword!=''">
			AND <include refid="where-list"></include>
		</if>
		<if test="categoryNum != null and categoryNum!=''">
			AND u.categoryNum = #{categoryNum}
		</if>
		ORDER BY usedNum DESC
		FETCH FIRST 1 ROWS ONLY
    </select>
	
	<!-- 중고글 좋아요 추가 및 카운트 -->
	<insert id="insertUsedLike" parameterType="map">
		INSERT INTO used_like(usedNum,userId) VALUES (#{usedNum},#{userId})
	</insert>
	
	<select id="usedLikeCount" parameterType="Integer" resultType="Integer">
		SELECT COUNT(*) FROM used_like WHERE usedNum = #{usedNum}
	</select>
	
	
	
	
	<!-- 이미지 CRUD -->
	<!-- 글 수정할때, 파일 수정할경우 선택한 파일지움 -->
	<delete id="deleteimage" parameterType="map">
		DELETE FROM used_image WHERE ${field} = #{used_imageFileNum}
	</delete>
	
	
	<!-- 모든 이미지 삭제 -->
	<delete id="deleteAllImage" parameterType="map">
		DELETE FROM used_image WHERE ${field} = #{usedNum}
	</delete>
	
	<!-- 이미지 삽입 -->
	<insert id="insertImage" parameterType="com.sp.app.used.Used">
		INSERT INTO used_image(used_imageFileNum, imageFilename, usedNum) VALUES
				(usedfile_seq.NEXTVAL, #{imageFilename}, #{usedNum})
	</insert>
	
	<!-- 이미지넘버에 맞는 파일 하나읽어오기 -->
	<select id="readImage" parameterType="Integer" resultType="com.sp.app.used.Used">
		SELECT used_imageFileNum, usedNum, imageFilename
		FROM used_image
		WHERE used_imageFileNum = #{used_imageFileNum}
	</select>
	
	<!-- 이미지 리스트 -->
	<select id="imageList" parameterType="Integer" resultType="com.sp.app.used.Used">
		SELECT used_imageFileNum, imageFilename, usedNum
		FROM used_image
		WHERE usedNum=#{usedNum}    
	</select>
	
	
	
	
	<!-- 마이페이지  -->
	<select id="listUsed_mypage" parameterType="map" resultType="com.sp.app.used.Used">
		SELECT u.usedNum, u.userId, userName, subject, 
			       imageFilename, NVL(replyCount, 0) replyCount, usedLikeCount
			FROM used_bbs u
			JOIN member m ON u.userId=m.userId
			JOIN (
			   SELECT * FROM (
			      SELECT usedNum, rank() over(partition by usedNum order by used_imageFileNum) rank,  imageFilename FROM used_image
			   ) WHERE rank = 1 
			)  i ON u.usedNum = i.usedNum
			LEFT OUTER JOIN (
			SELECT usedNum, COUNT(*) replyCount FROM used_Reply
			WHERE answer = 0
			GROUP BY usedNum
		) r ON u.usedNum = r.usedNum
			LEFT OUTER JOIN (
				SELECT usedNum, COUNT(*) usedLikeCount FROM used_like
				GROUP BY usedNum
		) bc ON u.usedNum = bc.usedNum
	</select>
	
	
	
	
	<!-- 댓글 CRUD 구현 -->
	<!-- 댓글 등록 -->
	<insert id="insertReply" parameterType="com.sp.app.used.Reply">
		INSERT INTO used_reply(used_reviewNum, created_date, content,usedNum, userId, answer) 
		VALUES (usedReview_seq.NEXTVAL,SYSDATE,#{content}, #{usedNum}, #{userId}, #{answer})
	</insert>
	
	<!-- 댓글 수정. 댓글번호가 같고, 아이디가 같을때 수정! 대댓이면 대댓의 부모값도 같아야하게 만듦 -->
	<update id="updateReply" parameterType="map">
		UPDATE used_list SET content=#{content} 
		WHERE used_reviewNum = #{used_reviewNum} 
			<if test="mode=='reply'">
				OR answer=#{used_reviewNum}
			</if>
	</update>
	
	<!-- 댓글 삭제 -->
	<delete id="deleteReply" parameterType="map">
		DELETE FROM used_reply 
		WHERE used_reviewNum = #{used_reviewNum}
		<if test="mode=='reply'">
			OR answer = #{used_reviewNum}
		</if>
	</delete>
	
	
	<!-- 댓글관련 -->
	<!-- 댓글 갯수 -->
	<select id="replyCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0) FROM used_reply
		WHERE usedNum = #{usedNum} AND answer = 0
 	</select>
	
	<!-- 댓글 리스트, 대댓글 갯수 -->
	<select id="listReply" parameterType="map" resultType="com.sp.app.used.Reply">
		SELECT r.used_reviewNum, r.userId ,userName, r.usedNum, r.content, r.created_date,
		NVL(answerCount,0) answerCount,
		NVL(likeCount,0) likeCount
		FROM used_reply r
		JOIN member m ON r.userId = m.userId
		LEFT OUTER JOIN(
			SELECT answer, COUNT(*) answerCount
			FROM used_reply 
			WHERE answer!=0 
			GROUP BY answer
		) a ON r.used_reviewNum = a.answer
		LEFT OUTER JOIN (
			SELECT usedReplyNum, COUNT(*) likeCount
			FROM usedReplyLike  
			GROUP BY usedReplyNum
		) ON usedReplyNum = r.used_reviewNum
		WHERE usedNum = #{usedNum} AND r.answer = 0
		ORDER BY r.used_reviewNum DESC
		OFFSET #{offset} ROWS FETCH FIRST #{rows} ROWS ONLY
	</select>
	
	<!-- 댓글 좋아요 추가 -->
	<insert id="insertReplyLike" parameterType="map">
		INSERT INTO usedReplyLike(usedReplyNum, userId)
			VALUES (#{used_reviewNum},#{userId})
	</insert>
	
	<!-- 댓글 좋아요 카운트 -->
	<select id="replyLikeCount" parameterType="map" resultType="map">
		SELECT COUNT(*) likeCount
		FROM usedReplyLike 
		WHERE usedReplyNum = #{used_reviewNum}
	</select>
	
	<!-- 대댓글 카운트 -->
	<select id="replyAnswerCount" parameterType="Integer" resultType="Integer">
		SELECT NVL(COUNT(*),0) replyAnswerCount
		
		FROM used_reply
		WHERE answer!=0 AND used_reviewNum = #{answer}
	</select>
	
	<!-- 대댓글 리스트 -->
	<select id="listReplyAnswer" parameterType="Integer" resultType="com.sp.app.used.Reply">
		SELECT r.used_reviewNum, usedNum, r.userId, userName, content, created_date, answer
		FROM used_reply r
		JOIN member m ON r.userId = m.userId
		WHERE answer = #{answer}
		ORDER BY used_reviewNum DESC
	</select>
	
	
	
	
	<!-- 찜목록 기능 -->
	<!-- 찜목록테이블에 데이터 삽입 -->
	<insert id="insertKeepList" parameterType="map">
		INSERT INTO used_keeplist(usedNum, userId) VALUES (#{usedNum}, #{userId})
	</insert>
	
	<!-- 찜목록 개수 가져오기 -->
	<select id="usedKeepCount" parameterType="map" resultType="Integer">
		SELECT COUNT(*) FROM used_keeplist WHERE userId = #{userId}
	</select>
	
	<!-- 찜목록 리스트 불러오기 -->
	<!-- ROWS FETCH FIRST : 상위 1개 검색 -->
	<select id="keepList" parameterType="map" resultType="com.sp.app.used.Used">
		SELECT u.usedNum, u.userId, subject, sold_check, TO_CHAR(created_date,'YYYY-MM-DD')created_date,
        imageFilename, u.price
      	FROM used_bbs u
      	JOIN (
         	SELECT * FROM(
            	SELECT usedNum, rank() over(partition by usedNum order by used_imageFileNum) rank, imageFilename
           		FROM used_image
         	) WHERE rank = 1
      	) i ON u.usedNum = i.usedNum
      	JOIN used_keeplist k ON k.usedNum = u.usedNum
      	WHERE k.userId = #{userId}
      	ORDER BY u.usedNum DESC
	</select>
	
<!-- 
SELECT u.usedNum, k.userId, subject, sold_check, hitCount, TO_CHAR(created_date,'YYYY-MM-DD')created_date,
			imageFilename, u.price, NVL(keepCount,0)
FROM used_bbs u
JOIN (
	SELECT * FROM(
		SELECT usedNum, rank() over(partition by usedNum order by used_imageFileNum) rank, imageFilename
		FROM used_image
		) WHERE rank = 1
	) i ON u.usedNum = i.usedNum
LEFT OUTER JOIN (
	SELECT usedNum, COUNT(*) keepCount FROM used_keeplist
	GROUP BY usedNum
) k ON k.usedNum = u.usedNum
WHERE u.userId = #{userId}
ORDER BY usedNum DESC
 -->
 
	
	<delete id="deleteKeep" parameterType="map">
		DELETE FROM used_keeplist
		WHERE usedNum = #{usedNum}
	</delete>
	
	<!-- 메인에 띄우는용 -->
	<select id="readUsedHit" resultType="com.sp.app.used.Used">
		SELECT u.usedNum, imageFilename, hitCount
		FROM used_bbs u
		JOIN used_image i ON u.usedNum = i.usedNum
		ORDER BY hitCount DESC
		FETCH FIRST 1 ROW ONLY
	</select>
	
	<select id="readUsedLike" resultType="com.sp.app.used.Used">
		SELECT u.usedNum, imageFilename, NVL(usedLikeCount, 0)usedLikeCount
		FROM used_bbs u
		JOIN (
			SELECT * FROM(
				SELECT usedNum, rank() over(partition by usedNum order by used_imageFileNum) rank, imageFilename
				FROM used_image
			) WHERE rank = 1
		) i ON u.usedNum = i.usedNum
		LEFT OUTER JOIN (
			SELECT usedNum, COUNT(*) usedLikeCount FROM used_like
			GROUP BY usedNum
		) ul ON ul.usedNum = u.usedNum
		ORDER BY usedLikeCount DESC
		FETCH FIRST 1 ROW ONLY
	</select>
</mapper>