<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="used">
	
	<select id="used_seq" resultType="Integer">
		SELECT used_seq.NEXTVAL FROM dual
	</select>
	
	<!-- 글삽입 -->
	<insert id="insertUsed" parameterType="com.sp.app.used.Used">
		INSERT INTO used_bbs(usedNum, userId, subject, content, hitCount, created_date, price, productCondition, dealingMode, location, sold_check, categoryNum)
				VALUES(#{usedNum}, #{userId}, #{subject}, #{content}, 0, SYSDATE,
				#{price}, #{productCondition}, #{dealingMode}, #{location}, 0, #{categoryNum})
	</insert>
	
	<!-- 데이터개수  -->
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM used_bbs u
		JOIN member m ON u.userId=m.userId
		<where>
			<if test="categoryNum != null and categoryNum!=''">
				u.categoryNum = #{categoryNum}
			</if>
			<if test="keyword != null and keyword!=''">
				AND INSTR(content, #{keyword}) &gt; 0 
			</if>
		</where>
	</select>
	
	<!-- 글수정 -->
	<update id="updateUsed" parameterType="com.sp.app.used.Used">
		UPDATE used_bbs u SET subject=#{subject}, content=#{content}, categoryNum = #{categoryNum},sold_check=#{sold_check}, 
		price=#{price}, productCondition=#{productCondition}, dealingMode=#{dealingMode}, location=#{location}, usedNum=#{usedNum}
		WHERE usedNum = #{usedNum}
	</update>
	
	
	<!-- 글 삭제 -->
	<delete id="deleteUsed" parameterType="Integer">
		DELETE FROM used_bbs WHERE usedNum = #{usedNum}
	</delete>
	
	
	<!-- 글 수정할때, 파일 수정할경우 선택한 파일지움 -->
	<delete id="deleteimage" parameterType="map">
		DELETE FROM used_image WHERE ${field} = #{used_imageFileNum}
	</delete>
	
	
	<!-- 모든 이미지 삭제 -->
	<delete id="deleteAllImage" parameterType="map">
		DELETE FROM used_image WHERE ${field} = #{usedNum}
	</delete>
	
	
	<!-- 리스트 -->
	<select id="listUsed" parameterType="map" resultType="com.sp.app.used.Used">
		SELECT u.usedNum, u.userId, userName,c.categoryName, subject, sold_check, hitCount, TO_CHAR(created_date,'YYYY-MM-DD')created_date, u.categoryNum
		FROM used_bbs u
		JOIN member m ON u.userId = m.userId
		JOIN used_category c ON c.categoryNum = u.categoryNum
		<where>
			<if test="categoryNum!=null and categoryNum!='' ">
				u.categoryNum = #{categoryNum}
			</if>
			<if test="keyword != null and keyword !='' ">
				AND INSTR(content, #{keyword}) &gt; 0 
			</if>
		</where>
		ORDER BY u.usedNum DESC
	</select>
	
	<!-- 조회수 증가 -->
	<update id="updateHitCount" parameterType="Integer">
		UPDATE used_bbs SET hitCount=hitCount+1 WHERE usedNum = #{usedNum}
	</update>
	
	<!-- FETCH FIRST "N" ROWS ONLY 상위  N개결과 검색 -->
	<!-- 이전글 -->
	<select id="preReadDto" parameterType="map" resultType="com.sp.app.used.Used">
		SELECT usedNum, subject
		FROM used_bbs 
		WHERE usedNum &gt; #{usedNum}
		<if test="categoryNum!=null and categoryNum!=''">
			AND categoryNum = #{categoryNum}
		</if>
		<if test="keyword != null and keyword !=''">
			AND INSTR(content, #{keyword}) &gt; 0 
		</if>
		ORDER BY usedNum ASC
		FETCH FIRST 1 ROWS ONLY
    </select>

    <!-- 다음글 -->
    <select id="nextReadDto" parameterType="map" resultType="com.sp.app.used.Used">
		SELECT usedNum, subject
		FROM used_bbs 
		WHERE usedNum &lt; #{usedNum}
		<if test="categoryNum!=null and categoryNum!=''">
			AND categoryNum = #{categoryNum}
		</if>
		<if test="keyword != null and keyword !=''">
			AND INSTR(content, #{keyword}) &gt; 0 
		</if>
		ORDER BY usedNum DESC
		FETCH FIRST 1 ROWS ONLY
    </select>
	
	<select id="readUsed" parameterType="Integer" resultType="com.sp.app.used.Used">
		SELECT u.usedNum, u.userId, userName, price, productCondition, dealingMode, location,
			subject,content,TO_CHAR(created_date,'YYYY-MM-DD') created_date, sold_check, u.categoryNum, c.categoryName, hitCount, NVL(fileCount,0) fileCount
		FROM used_bbs u
		JOIN member m ON u.userId = m.userId
		JOIN used_category c ON c.categoryNum = u.categoryNum
		LEFT OUTER JOIN(
			SELECT usedNum, COUNT(*) fileCount FROM used_image
			GROUP BY usedNum
		) f ON u.usedNum = f.usedNum
		WHERE u.usedNum = #{usedNum}
	</select>
	
	<!-- 이미지 관련 -->
	<insert id="insertImage" parameterType="com.sp.app.used.Used">
		INSERT INTO used_image(used_imageFileNum, imageFilename, usedNum) VALUES
				(usedfile_seq.NEXTVAL, #{imageFilename}, #{usedNum})
	</insert>
	
	<!-- 이미지넘버에 맞는 파일 하나읽어오기 -->
	<select id="readImage" parameterType="Integer" resultType="com.sp.app.used.Used">
		SELECT used_imageFileNum, usedNum, imageFilename
		FROM used_image
		WHERE used_imageFileNum = #{used_imageFileNum}
	</select>
	
	<select id="imageList" parameterType="Integer" resultType="com.sp.app.used.Used">
		SELECT used_imageFileNum, imageFilename, usedNum
		FROM used_image
		WHERE usedNum=#{usedNum}    
	</select>
	
	<!-- 마이페이지  -->
	<select id="listUsed_mypage" parameterType="map" resultType="com.sp.app.used.Used">
		SELECT u.usedNum, u.userId, userName, subject, 
			       imageFilename, NVL(replyCount, 0) replyCount, usedLikeCount
			FROM used_bbs u
			JOIN member m ON u.userId=m.userId
			JOIN (
			   SELECT * FROM (
			      SELECT usedNum, rank() over(partition by usedNum order by used_imageFileNum) rank,  imageFilename FROM used_image
			   ) WHERE rank = 1 
			)  i ON u.usedNum = i.usedNum
			LEFT OUTER JOIN (
			SELECT usedNum, COUNT(*) replyCount FROM used_Reply
			WHERE answer = 0
			GROUP BY usedNum
		) r ON u.usedNum = r.usedNum
			LEFT OUTER JOIN (
				SELECT usedNum, COUNT(*) usedLikeCount FROM used_like
				GROUP BY usedNum
		) bc ON u.usedNum = bc.usedNum
	</select>
	
	
	<!-- 중고글 좋아요 추가 및 카운트 -->
	<insert id="insertUsedLike" parameterType="map">
		INSERT INTO used_like(usedNum,userId) VALUES (#{usedNum},#{userId})
	</insert>
	
	<select id="usedLikeCount" parameterType="Integer" resultType="Integer">
		SELECT COUNT(*) FROM used_like WHERE usedNum = #{usedNum}
	</select>
</mapper>